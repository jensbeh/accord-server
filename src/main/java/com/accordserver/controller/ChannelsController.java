package com.accordserver.controller;

import com.accordserver.ResponseMessage;
import com.accordserver.accessingdatamysql.categories.Categories;
import com.accordserver.accessingdatamysql.categories.CategoriesRepository;
import com.accordserver.accessingdatamysql.channels.Channels;
import com.accordserver.accessingdatamysql.channels.ChannelsRepository;
import com.accordserver.accessingdatamysql.server.Server;
import com.accordserver.accessingdatamysql.server.ServerRepository;
import com.accordserver.accessingdatamysql.user.User;
import com.accordserver.accessingdatamysql.user.UserRepository;
import com.github.cliftonlabs.json_simple.JsonArray;
import com.github.cliftonlabs.json_simple.JsonObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

import static com.accordserver.util.Constants.*;

@RestController
public class ChannelsController {

    // This means to get the bean called channelsRepository,... . Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private ChannelsRepository channelsRepository;

    @Autowired
    private CategoriesRepository categoriesRepository;

    @Autowired
    private ServerRepository serverRepository;

    @Autowired
    private UserRepository userRepository;

    /**
     * creates a new channel
     * WHO CAN DO? -> OWNER
     *
     * @param data     name of the new channel
     * @param userKey  key of the user
     * @param serverId id of the server where the channel should be added
     * @return rest answer
     */
    @PostMapping("/servers/{serverId}/categories/{categoryId}/channels") // Map ONLY POST Requests - createCategory
    public @ResponseBody
    ResponseMessage createChannel(@RequestBody Map<String, Object> data, @RequestHeader(value = USERKEY) String userKey, @PathVariable("serverId") String serverId, @PathVariable("categoryId") String categoryId) {

        User currentUser = userRepository.findByUserKey(userKey);
        Server currentServer = serverRepository.findById(Integer.parseInt(serverId));

        if (currentUser.getId() == currentServer.getOwner()) {
            Categories currentCategory = categoriesRepository.findById(Integer.parseInt(categoryId));
            Channels newChannel = new Channels(data.get("name").toString(), data.get("type").toString(), (boolean) data.get("privileged"), currentCategory, currentServer);

            currentCategory.setChannel(newChannel);

            categoriesRepository.save(currentCategory);

            JsonObject responseData = new JsonObject();
            responseData.put("id", String.valueOf(newChannel.getId()));
            responseData.put("name", newChannel.getName());
            responseData.put("type", newChannel.getType());
            responseData.put("privileged", newChannel.isPrivileged());
            responseData.put("category", String.valueOf(currentCategory.getId()));

            return new ResponseMessage(SUCCESS, "", responseData);
        } else {
            return new ResponseMessage(FAILED, "Not the correct user or wrong server!", new JsonObject());
        }
    }

    /**
     * Gets all channels of the given category and server
     * WHO CAN DO? -> ALL SERVER USER
     *
     * @param userKey    key of the user
     * @param serverId   id of the server where the channels should be returned
     * @param categoryId id of the category where the channels should be returned
     * @return json list of all channels of the given category
     */
    @GetMapping("/servers/{serverId}/categories/{categoryId}/channels")
    public @ResponseBody
    ResponseMessage getChannels(@RequestHeader(value = USERKEY) String userKey, @PathVariable("serverId") String serverId, @PathVariable("categoryId") String categoryId) {

        List<Channels> channelList = (List<Channels>) channelsRepository.findByCategoryId(Integer.parseInt(categoryId));

        JsonArray responseChannelDataList = new JsonArray();
        for (Channels channel : channelList) {
            JsonObject responseChannelData = new JsonObject();
            responseChannelData.put("id", String.valueOf(channel.getId()));
            responseChannelData.put("name", channel.getName());
            responseChannelData.put("type", channel.getType());
            responseChannelData.put("privileged", channel.isPrivileged());
            responseChannelData.put("category", categoryId);

            // add privileged member
            JsonArray jsonArrayPrivilegedMember = new JsonArray();
            for (User user : channel.getPrivilegedMember()) {
                jsonArrayPrivilegedMember.add(String.valueOf(user.getId()));
            }
            responseChannelData.put("members", jsonArrayPrivilegedMember);

            // add audio member
            JsonArray jsonArrayAudioMember = new JsonArray();
            for (User user : channel.getAudioMember()) {
                jsonArrayAudioMember.add(String.valueOf(user.getId()));
            }
            responseChannelData.put("audioMembers", jsonArrayAudioMember);

            responseChannelDataList.add(responseChannelData);
        }

        return new ResponseMessage(SUCCESS, "", responseChannelDataList);
    }
}
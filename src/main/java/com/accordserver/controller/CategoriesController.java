package com.accordserver.controller;

import com.accordserver.ResponseMessage;
import com.accordserver.accessingdatamysql.categories.Categories;
import com.accordserver.accessingdatamysql.categories.CategoriesRepository;
import com.accordserver.accessingdatamysql.channels.ChannelsRepository;
import com.accordserver.accessingdatamysql.server.Server;
import com.accordserver.accessingdatamysql.server.ServerRepository;
import com.github.cliftonlabs.json_simple.JsonArray;
import com.github.cliftonlabs.json_simple.JsonObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

import static com.accordserver.util.Constants.SUCCESS;
import static com.accordserver.util.Constants.USERKEY;

@RestController
public class CategoriesController {

    // This means to get the bean called categoriesRepository,... . Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private CategoriesRepository categoriesRepository;

    @Autowired
    private ServerRepository serverRepository;

    @Autowired
    private ChannelsRepository channelsRepository;

    /**
     * creates a new category
     *
     * @param data     name of the new category
     * @param userKey  key of the user
     * @param serverId id of the server where the category should be added
     * @return rest answer
     */
    @PostMapping("/servers/{id}/categories") // Map ONLY POST Requests - createCategory
    public @ResponseBody
    ResponseMessage createCategory(@RequestBody Map<String, Object> data, @RequestHeader(value = USERKEY) String userKey, @PathVariable("id") String serverId) {

        Server currentServer = serverRepository.findById(Integer.parseInt(serverId));
        Categories newCategory = new Categories(data.get("name").toString(), currentServer);

        currentServer.setCategory(newCategory);

        serverRepository.save(currentServer);

        JsonObject responseData = new JsonObject();
        responseData.put("id", String.valueOf(newCategory.getId()));
        responseData.put("name", newCategory.getName());
        responseData.put("server", String.valueOf(currentServer.getId()));
        responseData.put("channels", new JsonArray());
        return new ResponseMessage(SUCCESS, "", responseData);
    }

    /**
     * Gets all categories of the given server
     * WHO CAN DO? -> ALL SERVER USER
     *
     * @param userKey  key of the user
     * @param serverId id of the server where the channels should be returned
     * @return json list of all channels of the given category
     */
    @GetMapping("/servers/{serverId}/categories")
    public @ResponseBody
    ResponseMessage getCategories(@RequestHeader(value = USERKEY) String userKey, @PathVariable("serverId") String serverId) {

        List<Categories> categoriesList = (List<Categories>) categoriesRepository.findByServerId(Integer.parseInt(serverId));

        JsonArray responseCategoriesDataList = new JsonArray();
        for (Categories category : categoriesList) {
            JsonObject responseCategoryData = new JsonObject();
            responseCategoryData.put("id", String.valueOf(category.getId()));
            responseCategoryData.put("name", category.getName());
            responseCategoryData.put("server", serverId);
            responseCategoryData.put("channels", new JsonArray());

            responseCategoriesDataList.add(responseCategoryData);
        }

        return new ResponseMessage(SUCCESS, "", responseCategoriesDataList);
    }
}
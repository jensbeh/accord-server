package com.accordserver.controller;

import com.accordserver.ResponseMessage;
import com.accordserver.accessingdatamysql.categories.Categories;
import com.accordserver.accessingdatamysql.categories.CategoriesRepository;
import com.accordserver.accessingdatamysql.channels.ChannelsRepository;
import com.accordserver.accessingdatamysql.server.Server;
import com.accordserver.accessingdatamysql.server.ServerRepository;
import com.github.cliftonlabs.json_simple.JsonArray;
import com.github.cliftonlabs.json_simple.JsonObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

import static com.accordserver.util.Constants.SUCCESS;

@RestController
public class CategoriesController {

    @Autowired
    // This means to get the bean called userRepository. Which is auto-generated by Spring, we will use it to handle the data
    private CategoriesRepository categoriesRepository;

    @Autowired
    private ServerRepository serverRepository;

    @Autowired
    private ChannelsRepository channelsRepository;

    /**
     * creates a new category
     *
     * @param data     name of the new category
     * @param userKey  key of the user
     * @param serverId id of the server where the category should be added
     * @return rest answer
     */
    @PostMapping("/servers/{id}/categories") // Map ONLY POST Requests - createCategory
    public @ResponseBody
    ResponseMessage createCategory(@RequestBody Map<String, Object> data, @RequestHeader(value = "userKey") String userKey, @PathVariable("id") String serverId) {

        Server currentServer = serverRepository.findById(Integer.parseInt(serverId));
        Categories newCategory = new Categories(data.get("name").toString(), currentServer);

        currentServer.setCategory(newCategory);

        serverRepository.save(currentServer);

        JsonObject responseData = new JsonObject();
        responseData.put("id", String.valueOf(newCategory.getId()));
        responseData.put("name", newCategory.getName());
        responseData.put("server", String.valueOf(currentServer.getId()));
        responseData.put("channels", new JsonArray());
        return new ResponseMessage(SUCCESS, "", responseData);
    }

    /**
     * Gets all categories of the given server
     * WHO CAN DO? -> ALL SERVER USER
     *
     * @param userKey  key of the user
     * @param serverId id of the server where the channels should be returned
     * @return json list of all channels of the given category
     */
    @GetMapping("/servers/{serverId}/categories")
    public @ResponseBody
    ResponseMessage getCategories(@RequestHeader(value = "userKey") String userKey, @PathVariable("serverId") String serverId) {

        List<Categories> categoriesList = (List<Categories>) categoriesRepository.findByServerId(Integer.parseInt(serverId));

        JsonArray responseCategoriesDataList = new JsonArray();
        for (Categories category : categoriesList) {
            JsonObject responseCategoryData = new JsonObject();
            responseCategoryData.put("id", String.valueOf(category.getId()));
            responseCategoryData.put("name", category.getName());
            responseCategoryData.put("server", serverId);
            responseCategoryData.put("channels", new JsonArray());

            responseCategoriesDataList.add(responseCategoryData);
        }

        return new ResponseMessage(SUCCESS, "", responseCategoriesDataList);
    }
//
//    /**
//     * login with an available user
//     *
//     * @param loginForm name and password of the user
//     * @return rest answer
//     */
//    @PostMapping("/users/login")
//    public ResponseMessage login(@RequestBody LoginForm loginForm) {
//
//        User user = userRepository.findByName(loginForm.getName());
//
//        if (user != null) {
//            if (user.getPassword().equals(loginForm.getPassword())) {
//                UUID userKeyUuid = UUID.randomUUID();
//                String userKeyString = userKeyUuid.toString();
//                System.out.println(userKeyString);
//
//                user.setOnline(true).setUserKey(userKeyString);
//                userRepository.save(user);
//
//                JsonObject data = new JsonObject();
//                data.put(USERKEY, userKeyString);
//
//                // generate WebSocket Connection
//
//                return new ResponseMessage(SUCCESS, loginForm.getName() + " logged in!", data);
//            } else {
//                return new ResponseMessage(FAILED, "Wrong user-password!", new JsonObject());
//            }
//        } else {
//            return new ResponseMessage(FAILED, loginForm.getName() + " can't logged in!", new JsonObject());
//        }
//    }
//
//    /**
//     * logout with an available user
//     *
//     * @param userKey userKey of the user
//     * @return rest answer
//     */
//    @PostMapping("/users/logout")
//    public ResponseMessage logout(@RequestHeader(value = USERKEY) String userKey) {
//
//        for (User user : userRepository.findAll()) {
//            System.out.println(user.getName() + " : " + user.getUserKey());
//        }
//
//        User user = userRepository.findByUserKey(userKey);
//        if (user != null) {
//            if (user.isOnline()) {
//                // disconnect WebSocket Connection
//
//                user.setOnline(false).setUserKey(null);
//                userRepository.save(user);
//
//                // generate WebSocket Connection
//
//                return new ResponseMessage(SUCCESS, "Logged out", new JsonObject());
//            } else {
//                return new ResponseMessage(FAILED, "User is offline!", new JsonObject());
//            }
//        } else {
//            return new ResponseMessage(FAILED, "You can't logged out!", new JsonObject());
//        }
//    }
}
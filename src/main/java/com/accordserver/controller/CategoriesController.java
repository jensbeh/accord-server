package com.accordserver.controller;

import com.accordserver.ResponseMessage;
import com.accordserver.accessingdatamysql.categories.Categories;
import com.accordserver.accessingdatamysql.categories.CategoriesRepository;
import com.accordserver.accessingdatamysql.channels.ChannelsRepository;
import com.accordserver.accessingdatamysql.server.Server;
import com.accordserver.accessingdatamysql.server.ServerRepository;
import com.accordserver.accessingdatamysql.user.User;
import com.accordserver.accessingdatamysql.user.UserRepository;
import com.accordserver.webSocket.SystemWebSocketHandler;
import com.github.cliftonlabs.json_simple.JsonArray;
import com.github.cliftonlabs.json_simple.JsonObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

import static com.accordserver.util.Constants.*;

@RestController
public class CategoriesController {

    // This means to get the bean called categoriesRepository,... . Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private CategoriesRepository categoriesRepository;

    @Autowired
    private ServerRepository serverRepository;

    @Autowired
    private ChannelsRepository channelsRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private SystemWebSocketHandler systemWebSocketHandler;

    /**
     * creates a new category
     *
     * @param data     name of the new category
     * @param userKey  key of the user
     * @param serverId id of the server where the category should be added
     * @return rest answer
     */
    @PostMapping("/servers/{id}/categories") // Map ONLY POST Requests - createCategory
    public @ResponseBody
    ResponseMessage createCategory(@RequestBody Map<String, Object> data, @RequestHeader(value = USER_KEY) String userKey, @PathVariable("id") String serverId) {
        User currentUser = userRepository.findByUserKey(userKey);
        Server currentServer = serverRepository.findById(serverId).get();

        if (currentServer.getOwner().equals(currentUser.getId())) {
            // create category and save it
            Categories newCategory = new Categories(data.get("name").toString(), currentServer);

            currentServer.setCategory(newCategory);

            serverRepository.save(currentServer);

            // send webSocket message
            systemWebSocketHandler.sendCategoryCreated(currentServer, newCategory);

            // send response
            JsonObject responseData = new JsonObject();
            responseData.put("id", newCategory.getId());
            responseData.put("name", newCategory.getName());
            responseData.put("server", currentServer.getId());
            responseData.put("channels", new JsonArray());
            return new ResponseMessage(SUCCESS, "", responseData);

        } else {
            return new ResponseMessage(FAILED, "This is not your server!", new JsonObject());
        }

    }

    /**
     * Gets all categories of the given server
     * WHO CAN DO? -> ALL SERVER USER
     *
     * @param userKey  key of the user
     * @param serverId id of the server where the channels should be returned
     * @return json list of all channels of the given category
     */
    @GetMapping("/servers/{serverId}/categories")
    public @ResponseBody
    ResponseMessage getCategories(@RequestHeader(value = USER_KEY) String userKey, @PathVariable("serverId") String serverId) {
        List<Categories> categoriesList = (List<Categories>) categoriesRepository.findByServerId(serverId);

        JsonArray responseCategoriesDataList = new JsonArray();
        for (Categories category : categoriesList) {
            JsonObject responseCategoryData = new JsonObject();
            responseCategoryData.put("id", category.getId());
            responseCategoryData.put("name", category.getName());
            responseCategoryData.put("server", serverId);
            responseCategoryData.put("channels", new JsonArray());

            responseCategoriesDataList.add(responseCategoryData);
        }

        return new ResponseMessage(SUCCESS, "", responseCategoriesDataList);
    }

    /**
     * Change category name
     * WHO CAN DO? -> ONLY OWNER
     *
     * @param userKey key of the user
     * @return json list of all server
     */
    @PutMapping("/servers/{serverId}/categories/{categoryId}")
    public @ResponseBody
    ResponseMessage updateCategory(@RequestBody Map<String, Object> data, @RequestHeader(value = USER_KEY) String userKey, @PathVariable("serverId") String serverId, @PathVariable("categoryId") String categoryId) {
        User currentUser = userRepository.findByUserKey(userKey);

        Server currentServer = serverRepository.findById(serverId).get();
        Categories currentCategory = categoriesRepository.findById(categoryId).get();

        String newCategoryName = data.get("name").toString();

        if (currentServer.getOwner().equals(currentUser.getId())) {

            // update category
            currentCategory.setName(newCategoryName);
            categoriesRepository.save(currentCategory);

            // send webSocket message
            systemWebSocketHandler.sendCategoryUpdated(currentServer, currentCategory);

            // return json
            JsonObject categoryData = new JsonObject();
            categoryData.put("id", currentCategory.getId());
            categoryData.put("name", currentCategory.getName());
            categoryData.put("server", currentServer.getId());

            categoryData.put("channel", new JsonArray());

            return new ResponseMessage(SUCCESS, "", categoryData);
        } else {
            return new ResponseMessage(FAILED, "This is not your server!", new JsonObject());
        }
    }

    /**
     * delete whole category
     * WHO CAN DO? -> ONLY OWNER
     *
     * @param userKey key of the user
     * @return json list of all server
     */
    @DeleteMapping("/servers/{serverId}/categories/{categoryId}")
    public @ResponseBody
    ResponseMessage deleteCategory(@RequestHeader(value = USER_KEY) String userKey, @PathVariable("serverId") String serverId, @PathVariable("categoryId") String categoryId) {
        User currentUser = userRepository.findByUserKey(userKey);

        Server currentServer = serverRepository.findById(serverId).get();
        Categories currentCategory = categoriesRepository.findById(categoryId).get();

        if (currentServer.getOwner().equals(currentUser.getId())) {

            // delete category
            categoriesRepository.delete(currentCategory);

            // send webSocket message
            systemWebSocketHandler.sendCategoryDeleted(currentServer, currentCategory, currentUser);

            // return json
            JsonObject categoryData = new JsonObject();
            categoryData.put("id", currentCategory.getId());
            categoryData.put("name", currentCategory.getName());
            categoryData.put("server", currentServer.getId());
            categoryData.put("channels", new JsonArray());

            return new ResponseMessage(SUCCESS, "", categoryData);
        } else {
            return new ResponseMessage(FAILED, "This is not your server!", new JsonObject());
        }
    }
}
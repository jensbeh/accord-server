package com.accordserver.controller;

import com.accordserver.ResponseMessage;
import com.accordserver.accessingdatamysql.channels.Channels;
import com.accordserver.accessingdatamysql.messages.Messages;
import com.accordserver.accessingdatamysql.messages.MessagesRepository;
import com.accordserver.accessingdatamysql.user.User;
import com.github.cliftonlabs.json_simple.JsonArray;
import com.github.cliftonlabs.json_simple.JsonObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

import static com.accordserver.util.Constants.SUCCESS;

@RestController
public class MessagesController {

//    @Autowired
//    // This means to get the bean called userRepository. Which is auto-generated by Spring, we will use it to handle the data
//    private ServerRepository serverRepository;

    @Autowired
    private MessagesRepository messagesRepository;

    /**
     * Gets all messages of the given channel, category and server
     * WHO CAN DO? -> ALL SERVER USER
     *
     * @param userKey  key of the user
     * @param serverId id of the server where the channels should be returned
     * @param categoryId id of the category where the channels should be returned
     *
     * @return json list of all channels of the given category
     */
    @GetMapping("/servers/{serverId}/categories/{categoryId}/channels/{channelId}/messages")
    public @ResponseBody
    ResponseMessage getMessages(@RequestHeader(value = "userKey") String userKey, @PathVariable("serverId") String serverId, @PathVariable("categoryId") String categoryId, @PathVariable("channelId") String channelId, @RequestParam String timestamp) {

        List<Messages> MessagesList = (List<Messages>) messagesRepository.findByChannelId(Integer.parseInt(channelId));

        JsonArray responseMessagesDataList = new JsonArray();
        // put all messages
        for (Messages messages : MessagesList) {
            JsonObject responseMessageData = new JsonObject();
            responseMessageData.put("id", String.valueOf(messages.getId()));
            responseMessageData.put("channel", channelId);
            responseMessageData.put("timestamp", messages.getTimestampMessage());
            responseMessageData.put("from", messages.getFromUser());
            responseMessageData.put("text", messages.getContent());

            responseMessagesDataList.add(responseMessageData);
        }

        return new ResponseMessage(SUCCESS, "", responseMessagesDataList);
    }
//    /**
//     * login with an available user
//     *
//     * @param loginForm name and password of the user
//     * @return rest answer
//     */
//    @PostMapping("/users/login")
//    public ResponseMessage login(@RequestBody LoginForm loginForm) {
//
//        User user = userRepository.findByName(loginForm.getName());
//
//        if (user != null) {
//            if (user.getPassword().equals(loginForm.getPassword())) {
//                UUID userKeyUuid = UUID.randomUUID();
//                String userKeyString = userKeyUuid.toString();
//                System.out.println(userKeyString);
//
//                user.setOnline(true).setUserKey(userKeyString);
//                userRepository.save(user);
//
//                JsonObject data = new JsonObject();
//                data.put(USERKEY, userKeyString);
//
//                // generate WebSocket Connection
//
//                return new ResponseMessage(SUCCESS, loginForm.getName() + " logged in!", data);
//            } else {
//                return new ResponseMessage(FAILED, "Wrong user-password!", new JsonObject());
//            }
//        } else {
//            return new ResponseMessage(FAILED, loginForm.getName() + " can't logged in!", new JsonObject());
//        }
//    }
//
//    /**
//     * logout with an available user
//     *
//     * @param userKey userKey of the user
//     * @return rest answer
//     */
//    @PostMapping("/users/logout")
//    public ResponseMessage logout(@RequestHeader(value = USERKEY) String userKey) {
//
//        for (User user : userRepository.findAll()) {
//            System.out.println(user.getName() + " : " + user.getUserKey());
//        }
//
//        User user = userRepository.findByUserKey(userKey);
//        if (user != null) {
//            if (user.isOnline()) {
//                // disconnect WebSocket Connection
//
//                user.setOnline(false).setUserKey(null);
//                userRepository.save(user);
//
//                // generate WebSocket Connection
//
//                return new ResponseMessage(SUCCESS, "Logged out", new JsonObject());
//            } else {
//                return new ResponseMessage(FAILED, "User is offline!", new JsonObject());
//            }
//        } else {
//            return new ResponseMessage(FAILED, "You can't logged out!", new JsonObject());
//        }
//    }
}
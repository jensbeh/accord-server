package com.accordserver.controller;

import com.accordserver.ResponseMessage;
import com.accordserver.accessingdatamysql.categories.Categories;
import com.accordserver.accessingdatamysql.categories.CategoriesRepository;
import com.accordserver.accessingdatamysql.channels.Channels;
import com.accordserver.accessingdatamysql.channels.ChannelsRepository;
import com.accordserver.accessingdatamysql.server.Server;
import com.accordserver.accessingdatamysql.server.ServerRepository;
import com.accordserver.accessingdatamysql.user.User;
import com.accordserver.accessingdatamysql.user.UserRepository;
import com.github.cliftonlabs.json_simple.JsonArray;
import com.github.cliftonlabs.json_simple.JsonObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

import static com.accordserver.util.Constants.SUCCESS;

@RestController
public class ServerController {

    @Autowired
    // This means to get the bean called userRepository. Which is auto-generated by Spring, we will use it to handle the data
    private ServerRepository serverRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private CategoriesRepository categoriesRepository;

    @Autowired
    private ChannelsRepository channelsRepository;

    /**
     * creates a new server
     * AND needs to control the ManyToMany connection with User.
     *
     * @param data name of the new Server
     * @return rest answer
     */

    @PostMapping("/servers") // Map ONLY POST Requests - createServer
    public @ResponseBody
    ResponseMessage createServer(@RequestBody Map<String, Object> data, @RequestHeader(value = "userKey") String userKey) {
        User currentUser = userRepository.findByUserKey(userKey);

        // here it is important to set the one class to the many class
        Server newServer = new Server(data.get("name").toString()).setOwner(currentUser.getId());
        Categories newCategory = new Categories("default-category", newServer);
        Channels newChannel = new Channels("default-text-channel", "text", false, newCategory, newServer);

        // save newChannel to newCategory (ONLY FOR USE THE OBJECTS IN THIS METHOD, NO IMPACT TO mySQL!)
        newCategory.setChannel(newChannel);

        // save newCategory & newChannel to newServer (ONLY FOR USE THE OBJECTS IN THIS METHOD, NO IMPACT TO mySQL!)
        newServer.setCategory(newCategory).setChannel(newChannel);

        // set currentUser to the first Member
        newServer.setMembers(currentUser);
        currentUser.setMemberServers(newServer);

        serverRepository.save(newServer);
        categoriesRepository.save(newCategory);
        channelsRepository.save(newChannel);

        currentUser.setServer(newServer);
        userRepository.save(currentUser);

        JsonObject serverData = new JsonObject();
        serverData.put("id", String.valueOf(newServer.getId()));
        serverData.put("name", newServer.getName());

        return new ResponseMessage(SUCCESS, "", serverData);
    }

    /**
     * Gets all serversInfo
     * WHO CAN DO? -> ALL SERVER USER
     *
     * @param userKey key of the user
     * @return json list of all server
     */
    @GetMapping("/servers/{id}")
    public @ResponseBody
    ResponseMessage getServersInfo(@RequestHeader(value = "userKey") String userKey, @PathVariable("id") String serverId) {
        User currentUser = userRepository.findByUserKey(userKey);

        Server currentServer = serverRepository.findById(Integer.parseInt(serverId));

//        System.out.println("XXXXXXXXXXX " + currentServer.getMembers());

        JsonObject responseServerData = new JsonObject();
        responseServerData.put("id", String.valueOf(currentServer.getId()));
        responseServerData.put("name", currentServer.getName());
        responseServerData.put("owner", String.valueOf(currentServer.getOwner()));
        responseServerData.put("categories", new JsonArray().addAll(currentServer.getCategories()));

        JsonArray jsonArray = new JsonArray();
        for (User user : currentServer.getMembers()) {
            JsonObject jsonObject = new JsonObject();
            jsonObject.put("id", String.valueOf(user.getId()));
            jsonObject.put("name", user.getName());
            jsonObject.put("online", user.isOnline());
            jsonObject.put("description", user.getDescription());
            jsonArray.add(jsonObject);
        }
        responseServerData.put("members", jsonArray);

        return new ResponseMessage(SUCCESS, "", responseServerData);
    }

    /**
     * Gets all servers
     * WHO CAN DO? -> ALL SERVER USER
     *
     * @param userKey key of the user
     * @return json list of all server
     */
    @GetMapping("/servers")
    public @ResponseBody
    ResponseMessage getServers(@RequestHeader(value = "userKey") String userKey) {
        User currentUser = userRepository.findByUserKey(userKey);

        List<Server> serverList = (List<Server>) serverRepository.findByOwner(currentUser.getId());

        JsonArray responseServerDataList = new JsonArray();
        for (Server server : serverList) {
            JsonObject responseServerData = new JsonObject();
            responseServerData.put("id", String.valueOf(server.getId()));
            responseServerData.put("name", server.getName());

            responseServerDataList.add(responseServerData);
        }

        return new ResponseMessage(SUCCESS, "", responseServerDataList);
    }
//
//    /**
//     * login with an available user
//     *
//     * @param loginForm name and password of the user
//     * @return rest answer
//     */
//    @PostMapping("/users/login")
//    public ResponseMessage login(@RequestBody LoginForm loginForm) {
//
//        User user = userRepository.findByName(loginForm.getName());
//
//        if (user != null) {
//            if (user.getPassword().equals(loginForm.getPassword())) {
//                UUID userKeyUuid = UUID.randomUUID();
//                String userKeyString = userKeyUuid.toString();
//                System.out.println(userKeyString);
//
//                user.setOnline(true).setUserKey(userKeyString);
//                userRepository.save(user);
//
//                JsonObject data = new JsonObject();
//                data.put(USERKEY, userKeyString);
//
//                // generate WebSocket Connection
//
//                return new ResponseMessage(SUCCESS, loginForm.getName() + " logged in!", data);
//            } else {
//                return new ResponseMessage(FAILED, "Wrong user-password!", new JsonObject());
//            }
//        } else {
//            return new ResponseMessage(FAILED, loginForm.getName() + " can't logged in!", new JsonObject());
//        }
//    }
//
//    /**
//     * logout with an available user
//     *
//     * @param userKey userKey of the user
//     * @return rest answer
//     */
//    @PostMapping("/users/logout")
//    public ResponseMessage logout(@RequestHeader(value = USERKEY) String userKey) {
//
//        for (User user : userRepository.findAll()) {
//            System.out.println(user.getName() + " : " + user.getUserKey());
//        }
//
//        User user = userRepository.findByUserKey(userKey);
//        if (user != null) {
//            if (user.isOnline()) {
//                // disconnect WebSocket Connection
//
//                user.setOnline(false).setUserKey(null);
//                userRepository.save(user);
//
//                // generate WebSocket Connection
//
//                return new ResponseMessage(SUCCESS, "Logged out", new JsonObject());
//            } else {
//                return new ResponseMessage(FAILED, "User is offline!", new JsonObject());
//            }
//        } else {
//            return new ResponseMessage(FAILED, "You can't logged out!", new JsonObject());
//        }
//    }
}